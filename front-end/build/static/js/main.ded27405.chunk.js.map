{"version":3,"sources":["logo.svg","Map.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","BaseLayer","LayersControl","ACCESS_TOKEN","places","name","lat","lon","withStyles","theme","paper","padding","spacing","justifyContent","alignItems","container","marginTop","props","classes","Grid","className","item","Paper","Map","center","zoom","position","checked","TileLayer","url","attribution","maxZoom","tileSize","zoomOffset","id","map","index","Marker","key","Popup","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ded27405.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Map, TileLayer, Marker, Popup, LayersControl } from 'react-leaflet';\nimport { withStyles } from '@material-ui/core/styles';\nimport './map.css';\nconst { BaseLayer } = LayersControl;\n\n// Access token for Mapbox map layers\nconst ACCESS_TOKEN =\n  'sk.eyJ1IjoibWFya3Vzcm9tYW4iLCJhIjoiY2s3OHEzNXh0MGhwczNsbnl5bm0zbWpjZSJ9.Yeq0LjbnbitSVkqHUH1cbg';\n\nconst places = [\n  {\n    name: 'Eficode HQ',\n    lat: 60.169392,\n    lon: 24.925751\n  },\n  {\n    name: 'TUT',\n    lat: 61.44982,\n    lon: 23.85863\n  },\n  {\n    name: 'Kamppi',\n    lat: 60.168499,\n    lon: 24.93248\n  },\n  {\n    name: 'Oulu',\n    lat: 65.012093,\n    lon: 25.465076\n  },\n  {\n    name: 'Airport',\n    lat: 60.314707,\n    lon: 24.948027\n  }\n];\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: theme.spacing(4)\n  }\n});\n\n/**\n * @description An interactive map component that has multiple different layer options\n * @param {} props provides the different classes for the component\n */\nconst InteractiveMap = props => {\n  const { classes } = props;\n\n  return (\n    <Grid container className={classes.container} spacing={2}>\n      <Grid item>\n        <Paper className={classes.paper}>\n          <Map center={[places[0].lat, places[0].lon]} zoom={13}>\n            <LayersControl position='topright'>\n              <BaseLayer checked name='Digitransit'>\n                <TileLayer\n                  url='https://cdn.digitransit.fi/map/v1/{id}/{z}/{x}/{y}@2x.png'\n                  attribution='Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                  id='hsl-map'\n                />\n              </BaseLayer>\n              <BaseLayer name='OpenStreetMap'>\n                <TileLayer\n                  attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                  url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                />\n              </BaseLayer>\n              <BaseLayer name='Swedish'>\n                <TileLayer\n                  url='https://cdn.digitransit.fi/map/v1/{id}/{z}/{x}/{y}@2x.png'\n                  attribution='Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                  id='hsl-map-sv'\n                />\n              </BaseLayer>\n              <BaseLayer name='Mapbox Satellite'>\n                <TileLayer\n                  url={`https://api.mapbox.com/v4/{id}/{z}/{x}/{y}@2x.jpg90?access_token=${ACCESS_TOKEN}`}\n                  attribution='© <a href=\"https://apps.mapbox.com/feedback/\">Mapbox</a> © <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                  id='mapbox.satellite'\n                />\n              </BaseLayer>\n              <BaseLayer name='Mapbox Streets'>\n                <TileLayer\n                  url={`https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token=${ACCESS_TOKEN}`}\n                  attribution='© <a href=\"https://apps.mapbox.com/feedback/\">Mapbox</a> © <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                />\n              </BaseLayer>\n              <BaseLayer name='Mapbox Dark'>\n                <TileLayer\n                  url={`https://api.mapbox.com/styles/v1/mapbox/dark-v10/tiles/{z}/{x}/{y}?access_token=${ACCESS_TOKEN}`}\n                  attribution='© <a href=\"https://apps.mapbox.com/feedback/\">Mapbox</a> © <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                />\n              </BaseLayer>\n              <BaseLayer name='Mapbox Light'>\n                <TileLayer\n                  url={`https://api.mapbox.com/styles/v1/mapbox/light-v10/tiles/{z}/{x}/{y}?access_token=${ACCESS_TOKEN}`}\n                  attribution='© <a href=\"https://apps.mapbox.com/feedback/\">Mapbox</a> © <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                />\n              </BaseLayer>\n              {/* Creating a marker for every given place */}\n              {places.map((item, index) => {\n                return (\n                  <Marker position={[item.lat, item.lon]} key={index}>\n                    <Popup>{item.name}</Popup>\n                  </Marker>\n                );\n              })}\n            </LayersControl>\n          </Map>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(InteractiveMap);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Map from './Map';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img src={logo} className='App-logo' alt='logo' />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className='App-link'\n          href='https://reactjs.org'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Learn React\n        </a>\n        <Map />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}