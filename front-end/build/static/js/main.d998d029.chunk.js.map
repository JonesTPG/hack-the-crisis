{"version":3,"sources":["components/MapMarker.jsx","components/Map.jsx","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","container","padding","spacing","justifyContent","alignItems","props","classes","place","Fragment","Grid","className","item","Typography","name","address","phone","Button","variant","onClick","event","preventDefault","BaseLayer","LayersControl","paper","marginTop","Paper","Map","center","places","lat","lon","zoom","position","checked","TileLayer","url","attribution","maxZoom","tileSize","zoomOffset","id","map","index","Marker","key","Popup","header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"84BAkDeA,eA5CA,SAAAC,GAAK,MAAK,CACvBC,UAAW,CACTC,QAASF,EAAMG,QAAQ,GACvBC,eAAgB,SAChBC,WAAY,aAwCDN,EApCG,SAAAO,GAAU,IAClBC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,MAQjB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMT,WAAS,EAACU,UAAWJ,EAAQN,UAAWE,QAAS,GACrD,kBAACO,EAAA,EAAD,CAAME,MAAI,GACR,kBAACC,EAAA,EAAD,KACGL,EAAMM,KACP,6BACCN,EAAMO,QACP,6BACCP,EAAMQ,QAGX,kBAACN,EAAA,EAAD,CAAME,MAAI,GACR,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAhBjB,SAAAC,GACjBA,EAAMC,mBAeA,mBAIF,kBAACX,EAAA,EAAD,CAAME,MAAI,GACR,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAxBjB,SAAAC,GACjBA,EAAMC,mBAuBA,wB,QCjCFC,EAAcC,IAAdD,UA6DOvB,eA3DA,SAAAC,GAAK,MAAK,CACvBwB,MAAO,CACLtB,QAASF,EAAMG,QAAQ,GACvBC,eAAgB,SAChBC,WAAY,UAEdJ,UAAW,CACTG,eAAgB,SAChBC,WAAY,SACZoB,UAAWzB,EAAMG,QAAQ,OAkDdJ,EA9CQ,SAAAO,GAAU,IACvBC,EAAYD,EAAZC,QAER,OACE,kBAACG,EAAA,EAAD,CAAMT,WAAS,EAACU,UAAWJ,EAAQN,UAAWE,QAAS,GACrD,kBAACO,EAAA,EAAD,CAAME,MAAI,GACR,kBAACc,EAAA,EAAD,CAAOf,UAAWJ,EAAQiB,OACxB,kBAACG,EAAA,EAAD,CAAKC,OAAQ,CAACC,EAAO,GAAGC,IAAKD,EAAO,GAAGE,KAAMC,KAAM,IACjD,kBAACT,EAAA,EAAD,CAAeU,SAAS,YACtB,kBAACX,EAAD,CAAWY,SAAO,EAACpB,KAAK,eACtB,kBAACqB,EAAA,EAAD,CACEC,IAAI,4DACJC,YAAY,yJACZC,QAAS,GACTC,SAAU,IACVC,YAAa,EACbC,GAAG,aAGP,kBAACnB,EAAD,CAAWR,KAAK,WACd,kBAACqB,EAAA,EAAD,CACEC,IAAI,4DACJC,YAAY,yJACZC,QAAS,GACTC,SAAU,IACVC,YAAa,EACbC,GAAG,gBAGNZ,EAAOa,KAAI,SAAC9B,EAAM+B,GACjB,OACE,kBAACC,EAAA,EAAD,CAAQX,SAAU,CAACrB,EAAKkB,IAAKlB,EAAKmB,KAAMc,IAAKF,GAC3C,kBAACG,EAAA,EAAD,KACE,kBAAC,EAAD,CAAWtC,MAAOI,iBCzBzBb,eAzBA,SAAAC,GAAK,MAAK,CACvB+C,OAAQ,CACNtB,UAAWzB,EAAMG,QAAQ,GACzBD,QAASF,EAAMG,QAAQ,GACvBC,eAAgB,SAChBC,WAAY,aAoBDN,EAhBH,SAAAO,GAAU,IACZC,EAAYD,EAAZC,QACR,OACE,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACE,EAAA,EAAD,CAAYK,QAAQ,KAAKP,UAAWJ,EAAQwC,QAA5C,gKAKA,kBAAC,EAAD,WCbYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d998d029.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  container: {\n    padding: theme.spacing(2),\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nconst MapMarker = props => {\n  const { classes, place } = props;\n\n  const handleFood = event => {\n    event.preventDefault();\n  };\n  const handleHelp = event => {\n    event.preventDefault();\n  };\n  return (\n    <React.Fragment>\n      <Grid container className={classes.container} spacing={2}>\n        <Grid item>\n          <Typography>\n            {place.name}\n            <br />\n            {place.address}\n            <br />\n            {place.phone}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Button variant='contained' onClick={handleHelp}>\n            Haluan auttaa!\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant='contained' onClick={handleFood}>\n            Haluan ruokaa!\n          </Button>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(MapMarker);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Map, TileLayer, Marker, Popup, LayersControl } from 'react-leaflet';\nimport { withStyles } from '@material-ui/core/styles';\nimport './map.css';\nimport MapMarker from './MapMarker';\nimport places from '../places.json';\nconst { BaseLayer } = LayersControl;\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: theme.spacing(4)\n  }\n});\n\nconst InteractiveMap = props => {\n  const { classes } = props;\n\n  return (\n    <Grid container className={classes.container} spacing={2}>\n      <Grid item>\n        <Paper className={classes.paper}>\n          <Map center={[places[0].lat, places[0].lon]} zoom={13}>\n            <LayersControl position='topright'>\n              <BaseLayer checked name='Digitransit'>\n                <TileLayer\n                  url='https://cdn.digitransit.fi/map/v1/{id}/{z}/{x}/{y}@2x.png'\n                  attribution='Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                  id='hsl-map'\n                />\n              </BaseLayer>\n              <BaseLayer name='Swedish'>\n                <TileLayer\n                  url='https://cdn.digitransit.fi/map/v1/{id}/{z}/{x}/{y}@2x.png'\n                  attribution='Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>'\n                  maxZoom={19}\n                  tileSize={512}\n                  zoomOffset={-1}\n                  id='hsl-map-sv'\n                />\n              </BaseLayer>\n              {places.map((item, index) => {\n                return (\n                  <Marker position={[item.lat, item.lon]} key={index}>\n                    <Popup>\n                      <MapMarker place={item} />\n                    </Popup>\n                  </Marker>\n                );\n              })}\n            </LayersControl>\n          </Map>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(InteractiveMap);\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\nimport Map from './components/Map';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  header: {\n    marginTop: theme.spacing(6),\n    padding: theme.spacing(2),\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nconst App = props => {\n  const { classes } = props;\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Typography variant='h6' className={classes.header}>\n          Tarvitsetko ruoka-apua tai haluatko auttaa heikommassa asemassa\n          olevia? Saat tarkempia tietoja ruoanjakelusta painamalla kartalla\n          näkyviä merkkejä.\n        </Typography>\n        <Map />\n      </header>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}